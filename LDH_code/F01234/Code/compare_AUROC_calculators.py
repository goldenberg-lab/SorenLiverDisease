import numpy as npimport pandas as pd from sklearn.metrics import auc from sklearn.metrics import roc_auc_score def get_confusion_matrix(label, preds):    cm = pd.DataFrame({'pred': preds, 'label': label})    cm['TN'] = np.where((cm['pred'] == 0) & (cm['label'] == 0), 1, 0)    cm['FP'] = np.where((cm['pred'] == 1) & (cm['label'] == 0), 1, 0)    cm['FN'] = np.where((cm['pred'] == 0) & (cm['label'] == 1), 1, 0)    cm['TP'] = np.where((cm['pred'] == 1) & (cm['label'] == 1), 1, 0)    cm['null'] = np.where(cm['pred'].isnull(), 1, 0)    return cm.sum()def my_auc_non_prob(label, values):     results = []    new_vals = np.unique(values.to_numpy(copy=True))    mid_vals = new_vals[:-1] + np.diff(new_vals)/2    mid_vals = np.unique(np.append(mid_vals, [-1000,1000]))    for t in mid_vals:         cm = get_confusion_matrix(label, (values >= t)*1)        results.append([t, cm['TP'], cm['FP'], cm['FN'], cm['TN']])        df = pd.DataFrame.from_records(results, columns=['thresh', 'TP', 'FP', 'FN', 'TN'])    df['fpr'] = df['FP']/(df['FP'] + df['TN'])    df['tpr'] = df['TP']/(df['TP'] + df['FN'])    df['prc'] = df['TP']/(df['TP'] + df['FP'])            auroc_df = df[['thresh', 'fpr', 'tpr']]    auroc_tempf = auroc_df.drop_duplicates(subset=['tpr'], keep='first')    auroc_templ = auroc_df.drop_duplicates(subset=['tpr'], keep='last')    auroc_df_2 = pd.concat([auroc_tempf, auroc_templ])    auroc_df_2.sort_values(by=['thresh'], ascending = [True], inplace=True)      auroc_tempf2 = auroc_df_2.drop_duplicates(subset=['fpr'], keep='first')    auroc_templ2 = auroc_df_2.drop_duplicates(subset=['fpr'], keep='last')    auroc_df_2 = pd.concat([auroc_tempf2, auroc_templ2])    auroc_df_2.sort_values(by=['thresh'], ascending = [True], inplace=True)    auroc_df_2.reset_index(drop=True, inplace=True)        auroc = auc(auroc_df_2['fpr'], auroc_df_2['tpr'])        return auroc# Step 2. Pick the combination of fibrosiss stages # Step 3. Get my custom AURC calculation # Step 4, Manually check aand make sure it does what it is supposed to ddk = 'McGill'num_trials = 1000predictions = '/Users/soren/Desktop/Thesis/Code/Lancet Digital Health Code/F01234/Predictions/predictions/'df = pd.read_csv(predictions + dk + '.csv', index_col=0)df = df.loc[df['orig_fibrosis'].isin([0,4])][['orig_fibrosis','APRI_vals', 'ENS1_probs']]df['label'] = np.where(df['orig_fibrosis']>=4, 1, 0)for i in range(0,num_trials):    if (i < 411):        continue     tdf = df.sample(n=len(df), random_state=i, replace=True)    tdf['APRI'] = df['APRI_vals']/max(df['APRI_vals'])    py_auc = roc_auc_score(tdf['label'], tdf['APRI'])    my_auc = my_auc_non_prob(tdf['label'], tdf['APRI_vals'])    print('%d, Python AUROC: %0.4f, My AUROC: %0.4f' % (i, py_auc, my_auc))        if (round(py_auc, 4) != round(my_auc,4)):        print('Wait here!')        print('Something went wrong')